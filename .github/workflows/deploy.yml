name: Deploy to ECS (image-only rollout)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "app.py"
      - "Dockerfile"
      - "requirements.txt"
      - ".github/workflows/deploy.yml"

permissions:
  id-token: write   # for OIDC
  contents: read

# ここでは “定数” だけ定義。相互参照はしない
env:
  AWS_REGION: ap-northeast-1
  AWS_ACCOUNT_ID: "291234479055"
  ECR_REPO: voicebot
  CLUSTER: voicebot-cluster
  SERVICE: svc-voicebot

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- AWS 認証（OIDC） ---
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::291234479055:role/GitHubActionsDeployRole
          role-session-name: gh-deploy-voicebot

      # --- ECR ログイン & Build/Push ---
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO}" --region "${AWS_REGION}" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "${ECR_REPO}" --region "${AWS_REGION}"

      - name: Build & Push (tag = commit SHA)
        run: |
          set -e
          IMAGE_TAG="${GITHUB_SHA}"
          ECR_IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
          docker build -t "${ECR_IMAGE_URI}:${IMAGE_TAG}" .
          docker push "${ECR_IMAGE_URI}:${IMAGE_TAG}"
          echo "ECR_IMAGE_URI=${ECR_IMAGE_URI}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      # --- 既存タスク定義を取得して image だけ差し替え ---
      - name: Get current task definition ARN
        id: curtd
        run: |
          ARN=$(aws ecs describe-services \
            --cluster "${CLUSTER}" \
            --services "${SERVICE}" \
            --region "${AWS_REGION}" \
            --query 'services[0].taskDefinition' --output text)
          echo "arn=$ARN" >> "$GITHUB_OUTPUT"

      - name: Download current task definition JSON
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ steps.curtd.outputs.arn }}" \
            --region "${AWS_REGION}" \
            --query 'taskDefinition' --output json > td.json

      - name: Install jq (if missing)
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y jq; }

      - name: Replace container image only (preserve secrets/env)
        run: |
          set -e
          IMAGE="${ECR_IMAGE_URI}:${IMAGE_TAG}"
          jq '
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes,
                .compatibilities, .registeredAt, .registeredBy)
            | .containerDefinitions[0].image = env.IMAGE
          ' td.json > td-new.json
          echo "New image: ${IMAGE}"

      - name: Register new task definition
        id: reg
        run: |
          NEW_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td-new.json \
            --region "${AWS_REGION}" \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "arn=$NEW_ARN" >> "$GITHUB_OUTPUT"
          echo "Registered: $NEW_ARN"

      - name: Update service to new task definition (rolling)
        run: |
          aws ecs update-service \
            --cluster "${CLUSTER}" \
            --service "${SERVICE}" \
            --task-definition "${{ steps.reg.outputs.arn }}" \
            --region "${AWS_REGION}"
          aws ecs wait services-stable \
            --cluster "${CLUSTER}" \
            --services "${SERVICE}" \
            --region "${AWS_REGION}"

      # --- 軽いスモークテスト（失敗で赤） ---
      - name: Smoke test - /openapi.json
        run: |
          set -e
          curl -fsSL https://voice.frontglass.net/openapi.json | jq '.openapi,.info.title' >/dev/null

      - name: Smoke test - /twiml returns XML
        run: |
          set -e
          curl -fsSL -H "Accept: text/xml" https://voice.frontglass.net/twiml | grep -i '^<\?xml' >/dev/null
