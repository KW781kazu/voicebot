# .github/workflows/deploy.yml （全文）
name: Deploy to ECS (immutable tag + smoke test)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]  # 任意。手動実行だけにしたい場合はこのブロックを消してください。

env:
  AWS_REGION: ap-northeast-1
  AWS_ACCOUNT_ID: "291234479055"
  ECR_REPO: "voicebot"
  ECS_CLUSTER: "voicebot-cluster"
  ECS_SERVICE: "svc-voicebot"          # ← あなたの実名に合わせてあります
  TASK_FAMILY: "voicebot-task"         # 既存のタスク定義ファミリー
  CONTAINER_NAME: "voicebot"           # タスク内のコンテナ名（異なる場合は変更）
  PUBLIC_BASE_URL: "https://voice.frontglass.net"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          # 既に動いているワークフローがあるはずなので、同じロールを使う場合は下行を設定してください
          # role-to-assume: arn:aws:iam::291234479055:role/<your-github-actions-role>

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push (tag = commit SHA)
        env:
          IMAGE_URI: ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
        run: |
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Get current task definition JSON
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query "taskDefinition" > td.json

      - name: Create new task definition JSON (replace image tag)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          cat td.json \
          | jq '.containerDefinitions |= map(if .name=="'${{ env.CONTAINER_NAME }}'" then .image="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/'${{ env.ECR_REPO }}':'${{ github.sha }}'" else . end)
                | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
          > td-new.json
          cat td-new.json

      - name: Register new task definition
        id: register
        run: |
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td-new.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TD_ARN=$ARN" >> $GITHUB_ENV
          echo "Registered: $ARN"

      - name: Update service to new task definition
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${{ env.NEW_TD_ARN }}"

      - name: Wait for stable service
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"

      # ---- ここがスモークテスト：/twiml が API に載っているかを検査 ----
      - name: Smoke test - /twiml appears in OpenAPI
        run: |
          set -e
          curl -fsSL "${{ env.PUBLIC_BASE_URL }}/openapi.json" | grep -i '"/twiml"' >/dev/null
          echo "OK: /twiml is present in openapi.json"

      - name: Smoke test - /twiml returns XML
        run: |
          set -e
          RSP=$(curl -fsSL "${{ env.PUBLIC_BASE_URL }}/twiml")
          echo "$RSP" | head -n 1
          echo "$RSP" | grep -i "<Response>" >/dev/null
          echo "OK: /twiml returns TwiML"

      - name: Show version
        run: |
          curl -fsSL "${{ env.PUBLIC_BASE_URL }}/version" || true
